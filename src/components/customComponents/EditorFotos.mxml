<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:custom="com.flexblocks.imagecropper.*"
		 width="600" height="450" creationComplete="init()" currentState="tomarFoto">
	
	<fx:Script>
		<![CDATA[
			import clases.GlobalStatic;
			import clases.PopUpUtils;
			
			import mx.core.FlexGlobals;
			import mx.graphics.codec.PNGEncoder;
			import mx.managers.PopUpManager;
			
			private var lastSelectedImage:uint = 0;
			
			private var currentCropbox:Rectangle;
			private var currentHandleSize:uint = 16;
			private var currentCropConstraint:Boolean = false
			
			private var img1Cropbox:Rectangle;
			private var img1HandleSize:uint = 10;
			private var img1CropConstraint:Boolean = false;
			
			private var img2Cropbox:Rectangle;			
			private var img2HandleSize:uint = 10;
			private var img2CropConstraint:Boolean = false;		
			
			private function doImageSelect():void {
				
				croppedImage.source = null;
				
				if (lastSelectedImage == 0) { 
					img1Cropbox = foto.getCropRect(true);
					img1HandleSize = foto.handleSize;
				}
				else {
					img2Cropbox = foto.getCropRect(true);
					img2HandleSize = foto.handleSize;
				}
				
				currentCropbox = lastSelectedImage == 0 ? img1Cropbox : img2Cropbox;
				currentHandleSize = lastSelectedImage == 0 ? img1HandleSize : img2HandleSize;
				currentCropConstraint = lastSelectedImage == 0 ? img1CropConstraint : img2CropConstraint;
				
				enableControls(false, true);			
			}
			
			private function imageReady():void {
				
				enableControls(true, true);
				
				foto.handleSize = currentHandleSize;
				
				foto.constrainToAspectRatio = currentCropConstraint;
				
				if (!currentCropbox) foto.setCropRect();
				else foto.setCropRect(currentCropbox.width, currentCropbox.height, currentCropbox.x, currentCropbox.y, true);
				
				doCrop();				
			}
			
			private function doCrop():void {
				
				var newImage:BitmapData = foto.croppedBitmapData;
				croppedImage.source = new Bitmap(newImage);
			}	
			
			private function enableControls(enable:Boolean, includeEnabled:Boolean = false):void {
				foto.enabled = enable;
			}
			
			import flash.display.Bitmap;
			import flash.display.BitmapData;
			import flash.net.FileReference;
			
			import mx.events.FlexEvent;
			 
			private var cam:Camera;
			 
			internal var bitmapData:BitmapData;
			 
			internal var bitmap:Bitmap;			
			
			
			import flash.events.Event; 
			import flash.media.Sound; 
			import flash.net.URLRequest; 
			
			import flash.filesystem.*;
			import flash.events.Event;
			import flash.media.*;
			import mx.core.SoundAsset;
			
			public function captureImage():void {  
				GlobalStatic.sonidoCamara();
				currentState = "editarFoto";
				parallel4.play();
				bitmapData = new BitmapData(vd.width,vd.height);
				bitmapData.draw(vd);
				foto.sourceImage = bitmapData;
			}
			 
			internal var i:Number=1;
			internal var fileRef:FileReference = new FileReference();
			 
			public function saveImage():void{
				     var encoder:PNGEncoder = new PNGEncoder();
				
				bitmapData = new BitmapData(containerFoto.width,containerFoto.height);
				bitmapData.draw(containerFoto);
				     var ba:ByteArray = encoder.encode(bitmapData);
				     fileRef.save(ba,"foto"+i+".png");
				     i++;
			}
			
			internal function init():void{
				parallel1.play();
				parallel3.play();
				GlobalStatic.sonidoOpenWindow();
				parallel2.play();
				
				_dynVideoSource=new DynamicStreamingVideoSource();
				
				var videoItems:Vector.<DynamicStreamingVideoItem>;
				videoItems=new Vector.<DynamicStreamingVideoItem>();
				videoItems[0]=new DynamicStreamingVideoItem();
				
				_dynVideoSource.host= "";
				_dynVideoSource.streamType=StreamType.LIVE;
				_dynVideoSource.streamItems=videoItems;
				
				vd.source=_dynVideoSource;			
				
				cam = Camera.getCamera();
				cam.setMode(640, 480, 40);
				cam.setQuality(0, 100);
				vd.videoObject.attachCamera(cam); 
				
				FlexGlobals.topLevelApplication.addEventListener(KeyboardEvent.KEY_UP , keyHandler);
			}
			
			internal function keyHandler(event:KeyboardEvent):void {
				if(event.keyCode == 27)
				{
					parentApplication.removeEventListener(KeyboardEvent.KEY_UP, keyHandler);
					PopUpUtils.closeAllPopups(parentApplication);
				}
			}
			
			internal function rollOutHandler(event:MouseEvent):void{
				container2.visible = false;
				lblEstablecerFoto.setStyle("color", "#575757");
			}
			
			internal function rollOverHandler(event:MouseEvent):void{
				container2.visible = true;
				lblEstablecerFoto.setStyle("color", "#ffffff");
			}
			
			internal function rollOutHandler2(event:MouseEvent):void{
				lblCambiarFoto.setStyle("color", "#575757");
			}
			
			internal function rollOverHandler2(event:MouseEvent):void{
				lblCambiarFoto.setStyle("color", "#ffffff");
			}
			
			
			import mx.events.FlexEvent;
			
			import org.osmf.net.StreamType;
			
			import spark.components.mediaClasses.DynamicStreamingVideoItem;
			import spark.components.mediaClasses.DynamicStreamingVideoSource;
			
			private var _cam:DynamicStreamingVideoSource =  new DynamicStreamingVideoSource();
			private var _dynVideoSource:DynamicStreamingVideoSource;
			
		]]>
	</fx:Script>
	<s:states>
		<s:State name="editarFoto"/>
		<s:State name="tomarFoto"/>
	</s:states>
	
	<s:transitions>
		<s:Transition id="myTransition" fromState="*" toState="*">
			<s:Parallel id="t1" targets="{[btnTomarFoto]}">
				<s:Move duration="400"/>
				<s:Resize duration="400"/>
			</s:Parallel>
		</s:Transition>
	</s:transitions>
	
	<fx:Declarations>
		<s:Parallel id="parallel1" duration="300" startDelay="1" target="{btnTomarFoto}">
			<mx:Move yFrom="0"/>
			<mx:Fade alphaFrom=".1" alphaTo="1"/>
		</s:Parallel>
		<s:Parallel id="parallel2" duration="600" startDelay="1" target="{btnCerrar}">
			<mx:Zoom zoomHeightFrom="0" zoomWidthFrom="0"/>
		</s:Parallel>
		<s:Parallel id="parallel3" duration="500" startDelay="1" target="{vd}">
			<mx:Fade alphaFrom=".1" alphaTo="1"/>
		</s:Parallel>
		<s:Parallel id="parallel4" duration="300" startDelay="1" target="{containerFoto}">
			<mx:Zoom zoomHeightFrom="0" zoomWidthFrom="0"/>
		</s:Parallel>
	</fx:Declarations>
	<s:Rect id="container3" visible="true" width="100%" height="100%" includeInLayout="true">
		<s:filters>
			<s:DropShadowFilter angle="90" blurX="20" blurY="20" distance="5" knockout="false"/>
		</s:filters>
		<s:fill>
			<s:SolidColor color="#FFFFFF"/>
		</s:fill>
	</s:Rect>
	
	<s:Rect id="header" visible="true" width="100%" height="10%" includeInLayout="true">
		<s:fill>
			<s:SolidColor color="#f29c2e"/>
		</s:fill>
		
	</s:Rect>
	<s:Label includeIn="editarFoto,tomarFoto" left="10" color="#FFFFFF" fontSize="16"
			 fontStyle="normal" fontWeight="normal" textDecoration="none" verticalCenter="-202"
			 text.editarFoto="Seleccione cualquier esquina y arrastre para recortar la foto."
			 text.tomarFoto=" Tomar foto instantánea"/>
	
	<s:VideoDisplay id="vd" includeIn="tomarFoto" left="10" right="10" top="55" height="326"
					scaleMode="zoom"/>  
	
	<s:HGroup id="hbox" y="26" height="328" gap="0" paddingLeft="10" verticalAlign="middle"
			  y.editarFoto="53" left.editarFoto="15" right.editarFoto="15" height.editarFoto="329"
			  visible.tomarFoto="false" x.tomarFoto="0" width.tomarFoto="600">
		<custom:ImageCropper id="foto" x="10" y="10" width="470" height="364"
							 backgroundColor="#FFFFFF"
							 cropConstraintChanged="trace('Crop constraint changed'); doCrop()"
							 cropConstraintDisabled="false"
							 cropDimensionsChanged="trace('Crop dimensions changed'); doCrop()"
							 cropPositionChanged="trace('Crop position changed'); doCrop()"
							 cropRectChanged="doCrop()" enabled="true" handleColor="#FFFFFF"
							 handleSize="20" maskAlpha="0.5" maskColor="#FFFFFF"
							 sourceImage="img/botonCerrar.png"
							 sourceImageLoadError="trace('Error while loading image')"
							 sourceImageReady="imageReady()"
							 y.editarFoto="40" width.editarFoto="320" height.editarFoto="240"
							 width.tomarFoto="320" height.tomarFoto="240"/>
		
		<s:Group id="containerFoto" y="37" right="15" width="240" height="240" color="#FFFFFF">
			<s:Image id="croppedImage" width="94%" height="94%" horizontalCenter="0"
					 verticalCenter="0"/>
			<s:Image id="circulo" width="100%" height="100%" smooth="true" smoothingQuality="high"
					 source="img/circle2.png"/>
			<s:Ellipse id="circle" width="93%" height="93%" horizontalCenter="0" verticalCenter="0">
				<s:stroke>
					<s:SolidColorStroke alpha="0.5" color="#cbc8c8" weight="10"/>
				</s:stroke>
			</s:Ellipse>
			<s:Ellipse id="circle2" width="93%" height="93%" horizontalCenter="0" verticalCenter="0">
				<s:stroke>
					<s:SolidColorStroke alpha=".9" color="#cbc8c8" weight="2"/>
				</s:stroke>
			</s:Ellipse>
		</s:Group>
	</s:HGroup>
	
	<s:Label id="lblVistaPrevia" includeIn="editarFoto" x="431" y="336" color="#4F4F4F"
			 fontStyle="normal" fontWeight="normal" text="Vista previa"/>
	
	<s:Group id="btnTomarFoto" left="0" height="50" buttonMode="true" click="captureImage()"
			 includeInLayout="true"
			 left.editarFoto="10" bottom.editarFoto="10" width.editarFoto="40%"
			 click.editarFoto="currentState='tomarFoto'" rollOut.editarFoto="rollOutHandler2(event)"
			 rollOver.editarFoto="rollOverHandler2(event)"
			 left.tomarFoto="10" right.tomarFoto="10" bottom.tomarFoto="10">
		
		<s:Rect id="container" width="100%" height="100%"
				left.editarFoto="0" bottom.editarFoto="0">
			<s:fill>
				<s:SolidColor color="#9b9b9b"/>
			</s:fill>
		</s:Rect>
		
		<s:Label id="lblCambiarFoto" color="#575757" fontSize="16" text="Tomar foto instantánea"
				 left.editarFoto="10" color.editarFoto="#FFFFFF" fontStyle.editarFoto="normal"
				 fontWeight.editarFoto="normal" text.editarFoto="Tomar foto nuevamente"
				 verticalCenter.editarFoto="0"
				 left.tomarFoto="10" color.tomarFoto="#FFFFFF" fontStyle.tomarFoto="normal"
				 fontWeight.tomarFoto="normal" text.tomarFoto="Capturar foto"
				 verticalCenter.tomarFoto="0"/>
		<s:Image id="imgSoporte" width="32" height="32" alpha=".9" scaleMode="letterbox"
				 smooth="true" smoothingQuality="high" source="img/imgCamaraGris.png"
				 right.editarFoto="10" verticalCenter.editarFoto="0"
				 right.tomarFoto="10" verticalCenter.tomarFoto="0"/>
	</s:Group>
	
	<s:Group id="btnGuardar" includeIn="editarFoto" right="15" bottom="10" width="331" height="50"
			 buttonMode="true" focusColor="#737373" includeInLayout="true"
			 rollOut="rollOutHandler(event)" rollOver="rollOverHandler(event)">
		
		<s:Rect id="container2" visible="false" width="100%" height="100%">
			<s:fill>
				<s:SolidColor color="#16acfa"/>
			</s:fill>
		</s:Rect>
		
		<s:Image id="imgProducto" right="10" width="42" height="42" alpha=".9" scaleMode="letterbox"
				 smooth="true" smoothingQuality="high" source="img/canasta.png" verticalCenter="-2"/>
		<s:Label id="lblEstablecerFoto" left="10" color="#575757" fontSize="16" fontStyle="normal"
				 text="Establecer como foto del producto" verticalCenter="0"/>
	</s:Group>
	<s:Image id="btnCerrar" includeIn="editarFoto,tomarFoto" right="10" top="5" width="32"
			 height="32" alpha="0.8" buttonMode="true" click="vd.videoObject.attachCamera(null); PopUpManager.removePopUp(this)"
			 rollOut="btnCerrar.alpha=.8" rollOver="btnCerrar.alpha=1" smooth="true"
			 smoothingQuality="high" source="img/botonTacheBlanco.png"/>
</s:Group>
