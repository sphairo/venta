<?xml version="1.0" encoding="utf-8"?>
<s:GridItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
					xmlns:s="library://ns.adobe.com/flex/spark"
					xmlns:mx="library://ns.adobe.com/flex/mx"
					xmlns:renders="renders.*"
					buttonMode="true" clipAndEnableScrolling="true">
	
	<fx:Script>
		<![CDATA[
			import com.anotherflexdev.ui.AlertError;
			
			import mx.events.FlexMouseEvent;
			import mx.utils.StringUtil;
			internal function onMouseDownOutside(event:FlexMouseEvent):void {
				event.target.close();
			}
			
			internal function defaultCallout_mouseDownHandler(event:MouseEvent):void{
				defaultCallout.close();
			}
			
			internal function onShowDefaultCalloutClick():void {
				parallel1.play();
				defaultCallout.open(img);
			}
			
			[Bindable] private var fileReferenceListImagen:FileReferenceList;
			
			internal function seleccionarImagen():void{
				fileReferenceListImagen = new FileReferenceList();
				fileReferenceListImagen.addEventListener(Event.SELECT, fileSelectedHandler);
				
				var imageTypes:FileFilter = new FileFilter("Images (*.jpg, *.jpeg, *.gif, *.png)", "*.jpg; *.jpeg; *.gif; *.png");
				var textTypes:FileFilter = new FileFilter("Text Files (*.txt, *.rtf)", "*.txt; *.rtf");
				var allTypes:Array = new Array(imageTypes, textTypes);
				var fileRef:FileReference = new FileReference();
				
				fileReferenceListImagen.browse(allTypes);
			}
			
			internal function fileSelectedHandler(event:Event):void {
				var fileReference:FileReference;
				var fileReferenceList:FileReferenceList = FileReferenceList(event.target);
				var fileList:Array = fileReferenceList.fileList;
				
				fileReference = FileReference(fileList[0]);
				fileReference.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA, uploadCompleteData);
				try
				{
					var urlRequest:URLRequest = new URLRequest("http://localhost/ventas/amfphp/services/subirImagen.php");
					fileReference.upload(urlRequest);
				}
				catch(error:Error)
				{
					AlertError.show("Error al cargar la imagen " + error.message.toString());	
				}
			}
			
			internal function uploadCompleteData(evt:DataEvent):void {
				data.path = StringUtil.trim(evt.data);
			}
			
			internal function img_clickHandler():void{
				if(data.isNew == true && data.path == null)
					seleccionarImagen();
				else
					onShowDefaultCalloutClick();
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:Parallel id="parallel1" duration="200" startDelay="1" target="{defaultCallout}">
			<mx:Fade alphaFrom=".1" alphaTo="1"/>
			<mx:Zoom zoomHeightFrom="0" zoomWidthFrom="0"/>
		</s:Parallel>
		<s:Callout id="defaultCallout" height="282" width="310" horizontalCenter="0"
				   mouseDown="defaultCallout_mouseDownHandler(event)"
				   mouseDownOutside="onMouseDownOutside(event)" verticalCenter="0">
			<s:layout>
				<s:VerticalLayout horizontalAlign="center" paddingTop="5"/>
			</s:layout>
			<s:Image width="152" height="152" source="{img.source}"/>
			<renders:renderFotoDesdePC click="seleccionarImagen()"/>
			<renders:renderFotoDesdeCamara/>
		</s:Callout>
	</fx:Declarations>
	<s:Rect id="background" visible="{data.error}" width="100%" height="100%">
		<s:fill>
			<s:SolidColor id="relleno" alpha=".5" color="red"/>
		</s:fill>
	</s:Rect>
	<s:Image id="img" width="32" height="32" click="img_clickHandler()" horizontalCenter="0"
			 source="{data.path != null ? ('http://127.0.0.1/Ventas/amfphp/services/files/'+this.data.path) : 'img/camara.png'}"
			 verticalCenter="0"/>
</s:GridItemRenderer>
