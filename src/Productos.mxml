<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:buttons="com.anotherflexdev.ui.buttons.*"
					   xmlns:components="components.*"
					   xmlns:renders="renders.*"
					   currentState="productos" preinitialize="preinitializeHandler(event)"
					   showStatusBar="false" skinClass="skins.skinProductos">
	<s:states>
		<s:State name="mantenimiento_productos"/>
		<s:State name="productos"/>
		<s:State name="estadisticas" enterState="generarGrafica()"/>
	</s:states>
	
	<fx:Style source="Styles/Main.css"/>
	
	<fx:Declarations>
		
		<mx:SolidColor id="sc1" alpha=".3" color="gray"/>
		<mx:SolidColor id="sc2" alpha=".1" color="red"/>
		<mx:SolidColor id="sc3" alpha=".1" color="blue"/>
		
		<mx:RemoteObject id="MiObjetoRemotoVentas" destination="amfphp" fault="errorGeneral(event)"
						 showBusyCursor="true" source="ventas">
			<s:method name="llenarReporteGrafico" result="ReporteGraficoExito(event)"/>
		</mx:RemoteObject>
		
		<mx:HTTPService id="service" fault="errorGeneral(event)" result="onJSONLoad(event)"
						resultFormat="text"
						url="http://localhost/Ventas/amfphp/services/getAllProducts.php"
						useProxy="false"/>
		<mx:HTTPService id="service2" fault="errorGeneral(event)" result="onJSONLoad2(event)"
						resultFormat="text"
						url="http://localhost/Ventas/amfphp/services/getAllProducts.php"
						useProxy="false"/>
		
		<mx:RemoteObject id="MiObjetoRemotoProducto" destination="amfphp" showBusyCursor="true"
						 source="producto"> 
			<s:method fault="errorGeneral(event)" name="callStoreProcedure"
					  result="resultCallStoreProcedure(event)"/>
		</mx:RemoteObject>
		
		<s:Callout id="defaultCallout" width="230" height="470"
				   mouseDown="defaultCallout_mouseDownHandler(event)"
				   mouseDownOutside="onMouseDownOutside(event)" verticalPosition="after">
			<s:layout>
				<s:VerticalLayout/>
			</s:layout> 
			<renders:renderCatalogoProductos includeIn="mantenimiento_productos,estadisticas"
											 click="currentState='productos'"/>
			<renders:renderAdministrarProductos includeIn="estadisticas,productos"
												click="administrarProductos(event)"/>
			<renders:renderEstadisticasProductos includeIn="mantenimiento_productos,productos"
												 click="currentState='estadisticas'"/>
			<renders:renderSoporte/>
			<renders:renderConfiguracion/>
			<renders:renderCerrarSession/>
		</s:Callout>
		<components:SparkCallout includeInLayout="false"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[		
			import clases.ConvertFechaToDate;
			import clases.GlobalStatic;
			import clases.Productos;
			import clases.Utileria;
			
			import com.adobe.serialization.json.JSON;
			import com.anotherflexdev.ui.AlertError;
			import com.anotherflexdev.ui.AlertInfo;
			
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			import mx.events.FlexEvent;
			import mx.events.FlexMouseEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			[Bindable] internal var dp:ArrayCollection = new ArrayCollection();
			[Bindable] public var arrayMarcas:ArrayCollection;
			[Bindable] public var arrayOferta:ArrayCollection = new ArrayCollection([{value:"SI"},{value:"NO"}]);
			[Bindable] public var arrayTipoVenta:ArrayCollection = new ArrayCollection([{value:"Pieza(s)"},{value:"A granel Kg/gr"}]);
			
			internal var arrayOriginal:ArrayCollection;
			
			internal function resultCallStoreProcedure(exito:ResultEvent):void
			{
				removeEventListener(ResultEvent.RESULT, resultCallStoreProcedure);
				switch(exito.result.response)
				{
					case "0":
						service2.send();
						break;
					case "1":
					case "2":
						AlertError.show("Ocurrio un error al guardar la información.", "Error");
						break;
				}
			}
			
			internal function onJSONLoad(event:ResultEvent):void
			{
				removeEventListener(ResultEvent.RESULT, onJSONLoad);
				encapsulado((com.adobe.serialization.json.JSON.decode(String(event.result))));
			}
			
			internal function onJSONLoad2(event:ResultEvent):void
			{
				removeEventListener(ResultEvent.RESULT, onJSONLoad2);
				encapsulado((com.adobe.serialization.json.JSON.decode(String(event.result))));
				AlertInfo.show("La información se ha guardo exitosamente.");
				PopUpManager.removePopUp(GlobalStatic.utility.progress);
			}
			
			
			internal function preinitializeHandler(event:FlexEvent):void
			{
				removeEventListener(FlexEvent.PREINITIALIZE,preinitializeHandler);
				maximize();
				service.send();
			}
			
			internal function errorGeneral(error:FaultEvent):void
			{
				removeEventListener(FaultEvent.FAULT, errorGeneral);
				PopUpManager.removePopUp(GlobalStatic.utility.progress);
				AlertError.show(error.fault.faultString, "Ocurrio un error");
			}
			
			internal function encapsulado(collection:*):void{
				dp.removeAll();
				for each(var item:Object in collection)
				dp.addItem(new clases.Productos(item));
				arrayOriginal = Utileria.clonar(dp);
			}
			
			[Bindable] internal var convertir:ConvertFechaToDate = new ConvertFechaToDate();
			
			internal function btnGuardar_clickHandler():void
			{
				GlobalStatic.utility.showLoad();
				var foundObject:Array = new Array(), index:uint = 0;
				var lista:IList = new ArrayList();
				var queryString:String;
				var newDate:String, oldDate:String, isCompleted:Boolean = false, operacion:uint = 0;
				for each(var item:Object in datagrid_productos.dataProvider)
				{
					if(item.isNew == true){
						
						if(item.nom_producto != "")
						{
							if(item.codigo_barra != "")
							{
								if(item.descripcion != "")
								{
									if(item.cantidad != Utileria.defaultValue)
									{
										if(item.precio != Utileria.defaultValue)
										{
											if(item.precio_compra != Utileria.defaultValue)
											{
												if(item.marca != "")
												{
													if(item.tipoVenta != "")
													{
														if(item.ofertas_Especiales != "")
														{
															if(item.fecha_entrada != null)
															{
																isCompleted = true;
															}
														}
													}
												}
											}	
										}
									}
								}
							}
						}
						
						if(isCompleted == true)
						{
							lista.addItem(" nom_producto = '" + item.nom_producto + "'");
							lista.addItem(" codigo_barra = '" + item.codigo_barra + "'");
							lista.addItem(" descripcion = '" + item.descripcion + "'");
							lista.addItem(" precio = " + item.precio);
							lista.addItem(" precio_compra = " + item.precio_compra);
							lista.addItem(" tipoVenta = '" + item.tipoVenta + "'");
							lista.addItem(" ofertas_Especiales = '" + item.ofertas_Especiales + "'");
							
							if(item.path != null)
								lista.addItem(" path = '" + item.path + "'");
							
							newDate = convertir.formatoFechaYYYYMMDD(item.fecha_entrada);
							lista.addItem(" fecha_entrada = Date('" + newDate + "')");
							
							GlobalStatic.utility.obtenerCamposValores(lista);
							GlobalStatic.utility.queryMasivo("INSERT INTO " + GlobalStatic.DataBaseName + ".producto (" + GlobalStatic.utility.campos + ") VALUES (" + GlobalStatic.utility.valores + ")");
							lista.removeAll();
							
							isCompleted = false;
						}else
						{
							item.error = true;
							excepcion();
							return;	
						}
						
					}else{
						foundObject = GlobalStatic.utility.findMatchesByIDReturnArray(item.id_producto, arrayOriginal,"id_producto");
						for each(var originalItem:Object in foundObject)
						{
							
							originalItem.nom_producto != item.nom_producto ? lista.addItem(" nom_producto = '" + item.nom_producto + "'") : "";
							originalItem.codigo_barra != item.codigo_barra ? lista.addItem(" codigo_barra = '" + item.codigo_barra + "'") : "";
							originalItem.descripcion != item.descripcion ? lista.addItem(" descripcion = '" + item.descripcion + "'") : "";
							originalItem.cantidad != item.cantidad ? lista.addItem(" cantidad = " + item.cantidad) : "";
							originalItem.precio != item.precio ? lista.addItem(" precio = " + item.precio) : "";
							originalItem.precio_compra != item.precio_compra ? lista.addItem(" precio_compra = " + item.precio_compra) : "";
							originalItem.marca != item.marca ? lista.addItem(" marca = '" + item.marca + "'") : "";
							originalItem.tipoVenta != item.tipoVenta ? lista.addItem(" tipoVenta = '" + item.tipoVenta + "'") : "";
							originalItem.ofertas_Especiales != item.ofertas_Especiales ? lista.addItem(" ofertas_Especiales = '" + item.ofertas_Especiales + "'") : "";
							originalItem.path != item.path ? lista.addItem(" path = '" + item.path + "'") : "";
							
							newDate = convertir.formatoFechaYYYYMMDD(item.fecha_entrada);
							oldDate = convertir.formatoFechaYYYYMMDD(originalItem.fecha_entrada);
							oldDate != newDate ? lista.addItem(" fecha_entrada = Date('" + newDate + "')") : "";
							
							if(lista.length > 0)
							{
								queryString = "UPDATE " + GlobalStatic.DataBaseName + ".producto SET";
								index = lista.length - 1;
								for each(var obj:Object in lista.toArray())
								index-- == 0 ? queryString += obj : queryString += obj + " ,";
								
								queryString += " WHERE id_producto = " + item.id_producto;
								GlobalStatic.utility.queryMasivo(queryString);
								lista.removeAll();
							}
							break;
						}
					}
				}
				if(GlobalStatic.utility.listaQuerys.length > 0)
					contruirQuery();
				else{
					PopUpManager.removePopUp(GlobalStatic.utility.progress);
					AlertInfo.show("Usted no ha realizado ningun cambio en la información de productos.");
				}	
			}
			
			internal function excepcion():void{
				PopUpManager.removePopUp(GlobalStatic.utility.progress);	
				dp.refresh();
				datagrid_productos.grid.setFocus();
				AlertError.show("La información proporcionada no esta completa o contiene un error, por favor verifique la información e intente guardar nuevamente.");
			}
			
			internal function contruirQuery():void
			{
				var superQuery:String = "";
				var index:uint = GlobalStatic.utility.listaQuerys.length - 1;
				for each(var query:Object in GlobalStatic.utility.listaQuerys.toArray())
				index-- == 0 ? superQuery += query : superQuery += query + "|()|";
				GlobalStatic.utility.listaQuerys.removeAll();//AHORA REMOVEMOS TODO LO QUE HAY EN LA LISTA PARA OCUPARLA LA PROXIMA VEZ.
				trace("call " + GlobalStatic.DataBaseName + ".Procedure_SqlTable(\"" + superQuery +"\")");
				MiObjetoRemotoProducto.callStoreProcedure.send(superQuery);
			}
			
			internal var palabra:String;
			
			internal function doSearch():void {
				palabra = txtBuscar.text.toLowerCase();
				dp.filterFunction = filterMyArrayCollection;
				dp.refresh();
			}
			
			internal function filterMyArrayCollection(item:Object):Boolean 
			{				
				return ((item.nom_producto.toLowerCase().indexOf(palabra) != -1) || (item.marca.toLowerCase().indexOf(palabra) != -1) || (item.descripcion.toLowerCase().indexOf(palabra) != -1))
			}
			
			internal function changeBusqueda():void{
				if(txtBuscar.text.length == 0){
					palabra = '';
					dp.filterFunction = filterMyArrayCollection;
					dp.refresh();
				}
			}
			
			internal function onShowDefaultCalloutClick():void {
				defaultCallout.open(btnMenu);
			}
			
			internal function onMouseDownOutside(event:FlexMouseEvent):void {
				event.target.close();
			}
			
			internal function defaultCallout_mouseDownHandler(event:MouseEvent):void
			{
				defaultCallout.close();
			}
			
			internal function administrarProductos(event:MouseEvent):void
			{
				currentState='mantenimiento_productos';
				
				if(arrayMarcas == null)	
					arrayMarcas = new ArrayCollection(Utileria.group(dp));
			}
			
			internal function btnNuevo_clickHandler(event:MouseEvent):void
			{
				var newItem:clases.Productos = new clases.Productos(
					{path:null,
						id_producto:-1,
						id_sucursal:1,
						codigo_barra:null,
						nom_producto:null,
						descripcion:null,
						cantidad:Utileria.defaultValue,
						precio:Utileria.defaultValue,
						precio_compra:Utileria.defaultValue,
						marca:null,
						fecha_entrada:Utileria.DateTodayToString(),
						tipoVenta:'P',	
						ofertas_Especiales:'N',	
						indice:Utileria.defaultValue,
						isNew:true}
				);
				dp.sort = null;
				dp.filterFunction = null;
				datagrid_productos.sortableColumns = false;
				dp.addItemAt(newItem,0);
				datagrid_productos.setSelectedIndex(0);
				datagrid_productos.startItemEditorSession(0,0);
				datagrid_productos.scroller.viewport.verticalScrollPosition = -1;
			}
			
			internal function btnEliminar_clickHandler():void
			{
				if(datagrid_productos.selectedItem == null)
					AlertInfo.show("Es necesario que seleccione un producto para poder eliminarlo.");
				else if(datagrid_productos.selectedItem != null)
				{
					if(datagrid_productos.selectedItem.nom_producto != null)
						GlobalStatic.utility.customAlert("¿Seguro que deseas eliminar el producto "+datagrid_productos.selectedItem.nom_producto+"?", this);
					else if(datagrid_productos.selectedItem.descripcion != null)
						GlobalStatic.utility.customAlert("¿Seguro que deseas eliminar el producto "+datagrid_productos.selectedItem.descripcion+"?", this);
					else
						GlobalStatic.utility.customAlert("¿Seguro que deseas eliminar el producto seleccionado?", this);
				}
			}
			
			public function eliminar():void{
				PopUpManager.removePopUp(GlobalStatic.utility.alert);	
				if(dp.getItemAt(datagrid_productos.selectedIndex).isNew == false)//SI EL ITEM SELECCIONADO NO ES UNO NUEVO, ENTONCES ELIMINAMOS FISICAMENTE EL REGISTRO EN LA BASE DE DATOS
					ejecutarConsultaSQLDelete(datagrid_productos.selectedItem.id_producto);
				else if(dp.getItemAt(datagrid_productos.selectedIndex).isNew == true)//SI ES UN NUEVO ITEM AGREGADO AL dataGridSeccionesSindicales SIGNIFICA QUE ES UN ITEM QUE NO EXISTE EN LA BASE DE DATOS Y QUE POR LO TANTO PUEDE SER REMOVIDO DEL dataprovider.
				{
					datagrid_productos.dataProvider.removeItemAt(datagrid_productos.selectedIndex);
					dp.refresh();
					arrayOriginal = Utileria.clonar(dp);
					datagrid_productos.selectedIndex = 0;
					AlertInfo.show("Se elimino correctamente el producto.");		
				}
			}
			
			internal function ejecutarConsultaSQLDelete(id_producto:int):void
			{
				GlobalStatic.utility.showLoad();
				var queryString:String = "UPDATE " + GlobalStatic.DataBaseName + ".producto SET status = 0 WHERE id_producto = " + id_producto;
				trace(queryString);
			}
			
			[Bindable] internal var arrayReporte:ArrayCollection = new ArrayCollection();
			[Bindable] internal var arrayConversion:ArrayCollection = new ArrayCollection();
			internal function ReporteGraficoExito(exito:ResultEvent):void {
				arrayReporte.removeAll();
				arrayReporte = exito.result as ArrayCollection;
				
				if(exito.result != null)
				{
					arrayConversion.removeAll();
					
					for(var indiceConversion:uint=0;indiceConversion<arrayReporte.length;indiceConversion++)
					{
						var mesConversion:uint = uint(arrayReporte.getItemAt(indiceConversion).mes);		
						switch(mesConversion)
						{
							case 1:	
								this.arrayConversion.addItem({
									ano:arrayReporte.getItemAt(indiceConversion).ano,
									mes:"ENERO",
									vendido:arrayReporte.getItemAt(indiceConversion).vendido,
									ganancias:arrayReporte.getItemAt(indiceConversion).ganancias
								});	
								break;
							case 2:
								this.arrayConversion.addItem({
									ano:arrayReporte.getItemAt(indiceConversion).ano,
									mes:"FEBRERO",
									vendido:arrayReporte.getItemAt(indiceConversion).vendido,
									ganancias:arrayReporte.getItemAt(indiceConversion).ganancias
								});	
								break;
							case 3:
								this.arrayConversion.addItem({
									ano:arrayReporte.getItemAt(indiceConversion).ano,
									mes:"MARZO",
									vendido:arrayReporte.getItemAt(indiceConversion).vendido,
									ganancias:arrayReporte.getItemAt(indiceConversion).ganancias
								});	
								break;
							case 4:
								this.arrayConversion.addItem({
									ano:arrayReporte.getItemAt(indiceConversion).ano,
									mes:"ABRIL",
									vendido:arrayReporte.getItemAt(indiceConversion).vendido,
									ganancias:arrayReporte.getItemAt(indiceConversion).ganancias
								});	
								break;
							case 5:
								this.arrayConversion.addItem({
									ano:arrayReporte.getItemAt(indiceConversion).ano,
									mes:"MAYO",
									vendido:arrayReporte.getItemAt(indiceConversion).vendido,
									ganancias:arrayReporte.getItemAt(indiceConversion).ganancias
								});	
								break;
							case 6:
								this.arrayConversion.addItem({
									ano:arrayReporte.getItemAt(indiceConversion).ano,
									mes:"JUNIO",
									vendido:arrayReporte.getItemAt(indiceConversion).vendido,
									ganancias:arrayReporte.getItemAt(indiceConversion).ganancias
								});	
								break;
							case 7:
								this.arrayConversion.addItem({
									ano:arrayReporte.getItemAt(indiceConversion).ano,
									mes:"JULIO",
									vendido:arrayReporte.getItemAt(indiceConversion).vendido,
									ganancias:arrayReporte.getItemAt(indiceConversion).ganancias
								});	
								break;
							case 8:
								this.arrayConversion.addItem({
									ano:arrayReporte.getItemAt(indiceConversion).ano,
									mes:"AGOSTO",
									vendido:arrayReporte.getItemAt(indiceConversion).vendido,
									ganancias:arrayReporte.getItemAt(indiceConversion).ganancias
								});	
								break;
							case 9:
								this.arrayConversion.addItem({
									ano:arrayReporte.getItemAt(indiceConversion).ano,
									mes:"SEPTIEMBRE",
									vendido:arrayReporte.getItemAt(indiceConversion).vendido,
									ganancias:arrayReporte.getItemAt(indiceConversion).ganancias
								});	
								break;
							case 10:
								this.arrayConversion.addItem({
									ano:arrayReporte.getItemAt(indiceConversion).ano,
									mes:"OCTUBRE",
									vendido:arrayReporte.getItemAt(indiceConversion).vendido,
									ganancias:arrayReporte.getItemAt(indiceConversion).ganancias
								});	
								break;
							case 11:
								this.arrayConversion.addItem({
									ano:arrayReporte.getItemAt(indiceConversion).ano,
									mes:"NOVIEMBRE",
									vendido:arrayReporte.getItemAt(indiceConversion).vendido,
									ganancias:arrayReporte.getItemAt(indiceConversion).ganancias
								});	
								break;
							case 12:
								this.arrayConversion.addItem({
									ano:arrayReporte.getItemAt(indiceConversion).ano,
									mes:"DICIEMBRE",
									vendido:arrayReporte.getItemAt(indiceConversion).vendido,
									ganancias:arrayReporte.getItemAt(indiceConversion).ganancias
								});	
								break;
						}
					}	
					column.dataProvider = arrayConversion; 	
				}
			}
			
			private function generarGrafica():void
			{
				MiObjetoRemotoVentas.llenarReporteGrafico.send
					(
						'2008-01-01',
						'2014-12-01'
					);
			}
		]]>
		
	</fx:Script>
	
	<s:Scroller id="scroll" width="100%" height="100%">
		<s:Group id="Contenedor" width="100%" height="100%">
			<s:BorderContainer id="border_header" x="0" y="0" width="100%" height="50"
							   borderVisible="false">
				<s:backgroundFill>
					<s:LinearGradient rotation="90">
						<s:GradientEntry color="#f29c2e"/>
						<s:GradientEntry color="#f9a73c"/>
					</s:LinearGradient>
				</s:backgroundFill> 
				<s:TextInput id="txtBuscar" includeIn="mantenimiento_productos,productos" y="12"
							 left="60" width="400" borderColor="#FFA800" borderVisible="true"
							 change="changeBusqueda()" chromeColor="#FFA800" enter="doSearch();"
							 focusColor="#FF8A00" fontSize="16" fontStyle="normal" maxChars="30"
							 prompt="Buscar"/>
				<s:Image id="btn_buscar" includeIn="mantenimiento_productos,productos" x="440"
						 width="50" height="50" buttonMode="true" click="doSearch();"
						 scaleMode="letterbox" smooth="true" smoothingQuality="high"
						 source="img/btnSearch.png" verticalCenter="-1"/>
				<s:Image id="btnMenu" x="25" width="24" height="24" buttonMode="true"
						 click="onShowDefaultCalloutClick()" smooth="true" smoothingQuality="high"
						 source="img/ModIco.png" verticalCenter="-1"/>
				<s:HGroup includeIn="mantenimiento_productos,productos" x="550" y="5" height="40">
					<renders:renderAdd id="btnNuevo" includeIn="mantenimiento_productos"
									   click="btnNuevo_clickHandler(event)"/>
					<renders:renderDelete id="btnEliminar" includeIn="mantenimiento_productos"
										  click="btnEliminar_clickHandler()"/>
					<renders:renderSave id="btnGuardar" includeIn="mantenimiento_productos"
										click="btnGuardar_clickHandler()"/>
					<renders:renderPrint id="btnImprimir" includeIn="mantenimiento_productos"
										 click="AlertInfo.show('Ocurrio un error al guardar la información.')"/>
					<renders:renderHelp id="btnAyuda" includeIn="mantenimiento_productos"
										click="AlertInfo.show('Ocurrio un error al guardar la información.')"/>
				</s:HGroup>
				<s:HGroup includeIn="estadisticas" x="111" y="10" width="80%" height="34" gap="20">
					<s:Label text="Mas vendidos"/>
					<s:Label text="No vendidos"/>
					<s:Label text="Historico de ventas y ganancias"/>
					<s:Label text="Ventas por empleado"/>
				</s:HGroup>
			</s:BorderContainer>
			
			<s:List id="list" includeIn="productos" left="20" right="0" top="51" bottom="0"
					allowMultipleSelection="true" borderVisible="false" contentBackgroundAlpha="0.0"
					dataProvider="{dp}" focusColor="#ffffff" itemRenderer="skins.itemRenderProducto"
					rollOverColor="#D1D1D1" selectionColor="#ADADAD">
				<s:layout>
					<s:TileLayout horizontalGap="12" verticalGap="12"/>
				</s:layout>
			</s:List>
			<s:DataGrid id="datagrid_productos" includeIn="mantenimiento_productos" x="0" y="50"
						width="100%" height="100%" dataProvider="{dp}" editable="true"
						hasFocusableChildren="true" includeInLayout="true">
				<s:columns>
					<s:ArrayList>
						<s:GridColumn id="c" dataField="codigo_barra" headerText="Codigo"
									  itemRenderer="itemRenderCodigoBarras"
									  rendererIsEditable="true"/>
						<s:GridColumn dataField="nom_producto" headerText="Nombre"
									  itemRenderer="itemRenderNombreProducto"
									  rendererIsEditable="true"/>
						<s:GridColumn dataField="marca" headerText="Marca"
									  itemRenderer="renders.itemRenderMarcas"
									  rendererIsEditable="true"/>
						<s:GridColumn dataField="descripcion" headerText="Descripción"
									  itemRenderer="itemRenderDescripcion" rendererIsEditable="true"/>
						<s:GridColumn dataField="cantidad" headerText="Cantidad"
									  itemRenderer="itemRenderCantidad" rendererIsEditable="true"/>
						<s:GridColumn dataField="precio" headerText="Precio"
									  itemRenderer="itemRenderPrecio" rendererIsEditable="true"/>
						<s:GridColumn dataField="precio_compra" headerText="Precio compra"
									  itemRenderer="itemRenderPrecioCompra"
									  rendererIsEditable="true"/>
						<s:GridColumn editable="false" headerText="Foto" itemRenderer="itemRenderImg"
									  rendererIsEditable="true"/>
						<s:GridColumn dataField="fecha_entrada" headerText="Fecha Entrada"
									  itemRenderer="renderFechaEntrada" rendererIsEditable="true"/>
						<s:GridColumn dataField="tipoVenta" headerText="Tipo Venta"
									  itemRenderer="renders.itemRenderTipoVenta"
									  rendererIsEditable="true"/>
						<s:GridColumn dataField="ofertas_Especiales" headerText="Oferta"
									  itemRenderer="renders.itemRenderOfertaEspecial"
									  rendererIsEditable="true"/>
						
						
					</s:ArrayList>
				</s:columns>
			</s:DataGrid> 
			<!--<com_internal:AmPieChart includeIn="estadisticas" width="100%" height="100%" angle="5"
									 dataProvider="{chartData}" depth3D="5" filters="{[shadow]}"
									 gradient="radial" groupPercent="3" horizontalCenter="0"
									 innerRadius="10" labelWidth="100" marginLeft="0"
									 marginRight="0" startDuration="2" startRadius="300"
									 titleField="country" valueField="visits" verticalCenter="20">
				<com_internal:balloon>
					<com_internal:AmBalloon borderAlpha="1" borderColor="#FFFFFF" borderThickness="2"
											cornerRadius="10"/>                
				</com_internal:balloon>
				
			</com_internal:AmPieChart>-->
			
			<!--<com_internal:AmSerialChart id="chart" includeIn="estadisticas" left="10" right="10"
										top="50" bottom="10" categoryField="country"
										dataProvider="{chartData2}" rotate="false" startDuration="1"> 
				<com_internal:graphs>
					<com_internal:AmGraph cornerRadiusTop="10"                
									  valueField="visits"
									  balloonText="[[category]]: [[value]]"
									  colorField="color"
									  type="column"
									  lineAlpha="0"
									  fillAlphas="[0.8]" />                        
				</com_internal:graphs>
				
				<com_internal:valueAxes>
					<com_internal:ValueAxis title="VISITS PER DAY" titleTextColor="#CC0000"/>
				</com_internal:valueAxes>		
				
				<com_internal:categoryAxis>
					<com_internal:CategoryAxis gridPosition="start" labelRotation="45" gridCount="{chartData2.length}"/>
				</com_internal:categoryAxis>
				
				<com_internal:balloon>
					<com_internal:AmBalloon cornerRadius="10" borderThickness="2" borderColor="#FFFFFF" borderAlpha="1"/>                
				</com_internal:balloon>    
				
				<com_internal:chartCursor>
					<com_internal:ChartCursor zoomable="false" cursorAlpha="0" categoryBalloonEnabled="false"/>                    
				</com_internal:chartCursor>    
			</com_internal:AmSerialChart>-->
			
			<!--<com_internal:AmSerialChart includeIn="estadisticas"
				id="chart"
				width="100%"
				height="100%"                
				dataProvider="{chartData3}"
				categoryField="year"
				angle="30"
				depth3D="30">
				
				<com_internal:graphs>
					<com_internal:AmGraph title="Income" id="g0" valueField="income" type="column" lineAlpha="0" fillColors="[#ADD981]" fillAlphas="[1]"/>                       
					<com_internal:AmGraph title="Expenses" markerType="line" id="g1" valueField="expenses" type="line" lineThickness="2" bullet="round" filters="{[shadow]}"/>                       
				</com_internal:graphs>
				<com_internal:valueAxes>
					<com_internal:ValueAxis dashLength="5"/>                           
				</com_internal:valueAxes>
				<com_internal:categoryAxis>
					<com_internal:CategoryAxis gridPosition="start" dashLength="5"/>
				</com_internal:categoryAxis>
			</com_internal:AmSerialChart>
			
			<com_internal:AmLegend
				color="0x000000"
				x="45"
				y="10"
				switchable="false"
				dataProvider="{chart}"
				width="100%"
				marginRight="20"
				marginLeft="40"
				textClickEnabled="false"
				marginBottom="5"/> -->    
			
			<mx:ColumnChart id="column" x="0" y="50" width="100%" height="100%"
							showDataTips="true" includeIn="estadisticas">
				<mx:horizontalAxis>
					<mx:CategoryAxis categoryField="mes"/>
				</mx:horizontalAxis>
				
				<mx:series>
					<mx:ColumnSet type="stacked">
						<mx:ColumnSeries displayName="Ganancias" fill="{sc1}"
										 hideDataEffect="deslizamientoSalida"
										 showDataEffect="deslizamientoEntrada"
										 xField="mes" yField="ganancias"/>
						<mx:ColumnSeries displayName="Vendido" fill="{sc2}"
										 hideDataEffect="deslizamientoSalida"
										 showDataEffect="deslizamientoEntrada"
										 xField="mes" yField="vendido"/>
						<!--<mx:ColumnSeries displayName="Año" fill="{sc3}"
										 hideDataEffect="deslizamientoSalida"
										 showDataEffect="deslizamientoEntrada"
										 yField="ano"/>-->
					</mx:ColumnSet>
				</mx:series>
			</mx:ColumnChart>			
		</s:Group>
	</s:Scroller>	
</s:WindowedApplication>
