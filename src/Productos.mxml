<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:buttons="com.anotherflexdev.ui.buttons.*"
					   xmlns:components="components.*"
					   xmlns:renders="renders.*"
					   xmlns:local="*"
					   xmlns:graficas="graficas.*"
					   currentState="productos" preinitialize="preinitializeHandler(event)"
					   showStatusBar="false" skinClass="skins.skinProductos">
	<s:states>
		<s:State name="mantenimiento_productos" enterState="enterStateMantenimiento(event)"/>
		<s:State name="productos"/>
		<s:State enterState="enterStateEstadisticas(event)" name="estadisticas"/>
		<s:State name="ganancias"/>
		<s:State name="ventas_empleado"/>
		<s:State name="mas_vendidos"/>
	</s:states>
	
	<fx:Style source="Styles/Main.css"/>
	
	<fx:Declarations>
		<s:Parallel id="parallel" duration="500" target="{btnMasVendidos}" startDelay="1">
			<mx:Zoom zoomWidthFrom="0" zoomHeightFrom="0"/>
		</s:Parallel>
		<s:Parallel id="parallel2" duration="1000" target="{btnNoVendidos}" startDelay="1">
			<mx:Zoom zoomWidthFrom="0" zoomHeightFrom="0"/>
		</s:Parallel>
		<s:Parallel id="parallel3" duration="1500" target="{btnGananciasVentas}" startDelay="1">
			<mx:Zoom zoomWidthFrom="0" zoomHeightFrom="0"/>
		</s:Parallel>
		<s:Parallel id="parallel4" duration="2000" target="{btnVentasEmpleado}" startDelay="1">
			<mx:Zoom zoomWidthFrom="0" zoomHeightFrom="0"/>
		</s:Parallel>
		
		<s:Parallel id="parallel5" duration="500" target="{btnNuevo}" startDelay="1">
			<s:Move yFrom="-100" yTo="0"/>
		</s:Parallel>
		
		<s:Parallel id="parallel6" duration="800" target="{btnEliminar}" startDelay="1">
			<s:Move yFrom="200" yTo="0"/>
		</s:Parallel>
		<s:Parallel id="parallel7" duration="1100" target="{btnGuardar}" startDelay="1">
			<s:Move yFrom="-300" yTo="0"/>
		</s:Parallel>
		<s:Parallel id="parallel8" duration="1400" target="{btnImprimir}" startDelay="1">
			<s:Move yFrom="400" yTo="0"/>
		</s:Parallel>
		<s:Parallel id="parallel9" duration="1700" target="{btnAyuda}" startDelay="1">
			<s:Move yFrom="-500" yTo="0"/>
		</s:Parallel>
		
		<s:Parallel id="parallel10" duration="1000" target="{containerNotify}" startDelay="1">
			<mx:Fade alphaFrom="1" alphaTo="0"/>
		</s:Parallel>
		
		<s:Parallel id="parallel11" duration="300" startDelay="1" target="{defaultCallout}">
			<mx:Fade alphaFrom=".1" alphaTo="1"/>
		</s:Parallel>
		
		<mx:HTTPService id="service" fault="errorGeneral(event)" result="onJSONLoad(event)"
						resultFormat="text"
						url="http://localhost/Ventas/amfphp/services/getAllProducts.php"
						useProxy="false"/>
		<mx:HTTPService id="service2" fault="errorGeneral(event)" result="onJSONLoad2(event)"
						resultFormat="text"
						url="http://localhost/Ventas/amfphp/services/getAllProducts.php"
						useProxy="false"/>
		
		<mx:RemoteObject id="MiObjetoRemotoProducto" destination="amfphp" showBusyCursor="true"
						 source="producto"> 
			<s:method fault="errorGeneral(event)" name="callStoreProcedure"
					  result="resultCallStoreProcedure(event)"/>
		</mx:RemoteObject>
		
		<s:Callout id="defaultCallout" width="230" height="465"
				   mouseDown="defaultCallout_mouseDownHandler(event)" rollOut="defaultCallout.close()"
				   mouseDownOutside="onMouseDownOutside(event)" verticalPosition="after">
			<s:layout>
				<s:VerticalLayout/>
			</s:layout> 
			<renders:renderCatalogoProductos includeIn="estadisticas,ganancias,mantenimiento_productos,mas_vendidos,ventas_empleado"
											 click="currentState='productos'"/>
			<renders:renderAdministrarProductos includeIn="estadisticas,ganancias,mas_vendidos,productos,ventas_empleado"
												click="administrarProductos(event)"/>
			<renders:renderEstadisticasProductos includeIn="mantenimiento_productos,productos"
												 click="currentState='estadisticas'"/>
			<renders:renderSoporte/>
			<renders:renderConfiguracion/>
			<renders:renderCerrarSession/>
		</s:Callout>
		<components:SparkCallout includeInLayout="false"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[		
			import clases.ConvertFechaToDate;
			import clases.GlobalStatic;
			import clases.Productos;
			import clases.Utileria;
			
			import com.adobe.serialization.json.JSON;
			import com.anotherflexdev.ui.AlertError;
			import com.anotherflexdev.ui.AlertInfo;
			
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.events.FlexMouseEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import org.osmf.events.TimeEvent;
			
			[Bindable] internal var dp:ArrayCollection = new ArrayCollection();
			[Bindable] public var arrayMarcas:ArrayCollection;
			[Bindable] public var arrayOferta:ArrayCollection = new ArrayCollection([{value:"SI"},{value:"NO"}]);
			[Bindable] public var arrayTipoVenta:ArrayCollection = new ArrayCollection([{value:"Pieza(s)"},{value:"A granel Kg/gr"}]);
			
			internal var arrayOriginal:ArrayCollection;
			
			internal function resultCallStoreProcedure(exito:ResultEvent):void
			{
				removeEventListener(ResultEvent.RESULT, resultCallStoreProcedure);
				switch(exito.result.response)
				{
					case "0":
						service2.send();
						break;
					case "1":
					case "2":
						AlertError.show("Ocurrio un error al guardar la información.", "Error");
						break;
				}
			}
			
			internal function onJSONLoad(event:ResultEvent):void
			{
				removeEventListener(ResultEvent.RESULT, onJSONLoad);
				encapsulado((com.adobe.serialization.json.JSON.decode(String(event.result))));
			}
			
			internal function onJSONLoad2(event:ResultEvent):void
			{
				removeEventListener(ResultEvent.RESULT, onJSONLoad2);
				encapsulado((com.adobe.serialization.json.JSON.decode(String(event.result))));
				AlertInfo.show("La información se ha guardo exitosamente.");
				PopUpManager.removePopUp(GlobalStatic.utility.progress);
			}
			
			
			internal function preinitializeHandler(event:FlexEvent):void
			{
				removeEventListener(FlexEvent.PREINITIALIZE,preinitializeHandler);
				maximize();
				service.send();
			}
			
			internal function errorGeneral(error:FaultEvent):void
			{
				removeEventListener(FaultEvent.FAULT, errorGeneral);
				PopUpManager.removePopUp(GlobalStatic.utility.progress);
				AlertError.show(error.fault.faultString, "Ocurrio un error");
			}
			
			internal function encapsulado(collection:*):void{
				dp.removeAll();
				for each(var item:Object in collection)
				dp.addItem(new clases.Productos(item));
				arrayOriginal = Utileria.clonar(dp);
			}
			
			[Bindable] internal var convertir:ConvertFechaToDate = new ConvertFechaToDate();
			
			internal function btnGuardar_clickHandler():void
			{
				GlobalStatic.utility.showLoad();
				var foundObject:Array = new Array(), index:uint = 0;
				var lista:IList = new ArrayList();
				var queryString:String;
				var newDate:String, oldDate:String, isCompleted:Boolean = false, operacion:uint = 0;
				for each(var item:Object in datagrid_productos.dataProvider)
				{
					if(item.isNew == true){
						
						if(item.nom_producto != "")
						{
							if(item.codigo_barra != "")
							{
								if(item.descripcion != "")
								{
									if(item.cantidad != Utileria.defaultValue)
									{
										if(item.precio != Utileria.defaultValue)
										{
											if(item.precio_compra != Utileria.defaultValue)
											{
												if(item.marca != "")
												{
													if(item.tipoVenta != "")
													{
														if(item.ofertas_Especiales != "")
														{
															if(item.fecha_entrada != null)
															{
																isCompleted = true;
															}
														}
													}
												}
											}	
										}
									}
								}
							}
						}
						
						if(isCompleted == true)
						{
							lista.addItem(" nom_producto = '" + item.nom_producto + "'");
							lista.addItem(" codigo_barra = '" + item.codigo_barra + "'");
							lista.addItem(" descripcion = '" + item.descripcion + "'");
							lista.addItem(" precio = " + item.precio);
							lista.addItem(" precio_compra = " + item.precio_compra);
							lista.addItem(" tipoVenta = '" + item.tipoVenta + "'");
							lista.addItem(" ofertas_Especiales = '" + item.ofertas_Especiales + "'");
							
							if(item.path != null)
								lista.addItem(" path = '" + item.path + "'");
							
							newDate = convertir.formatoFechaYYYYMMDD(item.fecha_entrada);
							lista.addItem(" fecha_entrada = Date('" + newDate + "')");
							
							GlobalStatic.utility.obtenerCamposValores(lista);
							GlobalStatic.utility.queryMasivo("INSERT INTO " + GlobalStatic.DataBaseName + ".producto (" + GlobalStatic.utility.campos + ") VALUES (" + GlobalStatic.utility.valores + ")");
							lista.removeAll();
							
							isCompleted = false;
						}else
						{
							item.error = true;
							excepcion();
							return;	
						}
						
					}else{
						foundObject = GlobalStatic.utility.findMatchesByIDReturnArray(item.id_producto, arrayOriginal,"id_producto");
						for each(var originalItem:Object in foundObject)
						{
							
							originalItem.nom_producto != item.nom_producto ? lista.addItem(" nom_producto = '" + item.nom_producto + "'") : "";
							originalItem.codigo_barra != item.codigo_barra ? lista.addItem(" codigo_barra = '" + item.codigo_barra + "'") : "";
							originalItem.descripcion != item.descripcion ? lista.addItem(" descripcion = '" + item.descripcion + "'") : "";
							originalItem.cantidad != item.cantidad ? lista.addItem(" cantidad = " + item.cantidad) : "";
							originalItem.precio != item.precio ? lista.addItem(" precio = " + item.precio) : "";
							originalItem.precio_compra != item.precio_compra ? lista.addItem(" precio_compra = " + item.precio_compra) : "";
							originalItem.marca != item.marca ? lista.addItem(" marca = '" + item.marca + "'") : "";
							originalItem.tipoVenta != item.tipoVenta ? lista.addItem(" tipoVenta = '" + item.tipoVenta + "'") : "";
							originalItem.ofertas_Especiales != item.ofertas_Especiales ? lista.addItem(" ofertas_Especiales = '" + item.ofertas_Especiales + "'") : "";
							originalItem.path != item.path ? lista.addItem(" path = '" + item.path + "'") : "";
							
							newDate = convertir.formatoFechaYYYYMMDD(item.fecha_entrada);
							oldDate = convertir.formatoFechaYYYYMMDD(originalItem.fecha_entrada);
							oldDate != newDate ? lista.addItem(" fecha_entrada = Date('" + newDate + "')") : "";
							
							if(lista.length > 0)
							{
								queryString = "UPDATE " + GlobalStatic.DataBaseName + ".producto SET";
								index = lista.length - 1;
								for each(var obj:Object in lista.toArray())
								index-- == 0 ? queryString += obj : queryString += obj + " ,";
								
								queryString += " WHERE id_producto = " + item.id_producto;
								GlobalStatic.utility.queryMasivo(queryString);
								lista.removeAll();
							}
							break;
						}
					}
				}
				if(GlobalStatic.utility.listaQuerys.length > 0)
					contruirQuery();
				else{
					PopUpManager.removePopUp(GlobalStatic.utility.progress);
					AlertInfo.show("Usted no ha realizado ningun cambio en la información de productos.");
				}	
			}
			
			internal function excepcion():void{
				PopUpManager.removePopUp(GlobalStatic.utility.progress);	
				dp.refresh();
				datagrid_productos.grid.setFocus();
				AlertError.show("La información proporcionada no esta completa o contiene un error, por favor verifique la información e intente guardar nuevamente.");
			}
			
			internal function contruirQuery():void
			{
				var superQuery:String = "";
				var index:uint = GlobalStatic.utility.listaQuerys.length - 1;
				for each(var query:Object in GlobalStatic.utility.listaQuerys.toArray())
				index-- == 0 ? superQuery += query : superQuery += query + "|()|";
				GlobalStatic.utility.listaQuerys.removeAll();//AHORA REMOVEMOS TODO LO QUE HAY EN LA LISTA PARA OCUPARLA LA PROXIMA VEZ.
				trace("call " + GlobalStatic.DataBaseName + ".Procedure_SqlTable(\"" + superQuery +"\")");
				MiObjetoRemotoProducto.callStoreProcedure.send(superQuery);
			}
			
			internal var palabra:String;
			
			internal function doSearch():void {
				palabra = txtBuscar.text.toLowerCase();
				dp.filterFunction = filterMyArrayCollection;
				dp.refresh();
			}
			
			internal function filterMyArrayCollection(item:Object):Boolean 
			{				
				return ((item.nom_producto.toLowerCase().indexOf(palabra) != -1) || (item.marca.toLowerCase().indexOf(palabra) != -1) || (item.descripcion.toLowerCase().indexOf(palabra) != -1))
			}
			
			internal function changeBusqueda():void{
				if(txtBuscar.text.length == 0){
					palabra = '';
					dp.filterFunction = filterMyArrayCollection;
					dp.refresh();
				}
			}
			
			internal function onShowDefaultCalloutClick():void {
				parallel11.play();
				defaultCallout.open(btnMenu);
			}
			
			internal function onMouseDownOutside(event:FlexMouseEvent):void {
				event.target.close();
			}
			
			internal function defaultCallout_mouseDownHandler(event:MouseEvent):void
			{
				defaultCallout.close();
			}
			
			internal function administrarProductos(event:MouseEvent):void
			{
				currentState='mantenimiento_productos';
				
				if(arrayMarcas == null)	
					arrayMarcas = new ArrayCollection(Utileria.group(dp));
				
				btnNuevo.y = -100;
				btnEliminar.y = 200;
				btnGuardar.y = -300;
				btnImprimir.y = 400;
				btnAyuda.y = -500;
			}
			
			internal function btnNuevo_clickHandler(event:MouseEvent):void
			{
				var newItem:clases.Productos = new clases.Productos(
					{path:null,
						id_producto:-1,
						id_sucursal:1,
						codigo_barra:null,
						nom_producto:null,
						descripcion:null,
						cantidad:Utileria.defaultValue,
						precio:Utileria.defaultValue,
						precio_compra:Utileria.defaultValue,
						marca:null,
						fecha_entrada:Utileria.DateTodayToString(),
						tipoVenta:'P',	
						ofertas_Especiales:'N',	
						indice:Utileria.defaultValue,
						isNew:true}
				);
				dp.sort = null;
				dp.filterFunction = null;
				datagrid_productos.sortableColumns = false;
				dp.addItemAt(newItem,0);
				datagrid_productos.setSelectedIndex(0);
				datagrid_productos.startItemEditorSession(0,0);
				datagrid_productos.scroller.viewport.verticalScrollPosition = -1;
			}
			
			internal function btnEliminar_clickHandler():void
			{
				if(datagrid_productos.selectedItem == null)
					AlertInfo.show("Es necesario que seleccione un producto para poder eliminarlo.");
				else if(datagrid_productos.selectedItem != null)
				{
					if(datagrid_productos.selectedItem.nom_producto != null)
						GlobalStatic.utility.customAlert("¿Seguro que deseas eliminar el producto "+datagrid_productos.selectedItem.nom_producto+"?", this);
					else if(datagrid_productos.selectedItem.descripcion != null)
						GlobalStatic.utility.customAlert("¿Seguro que deseas eliminar el producto "+datagrid_productos.selectedItem.descripcion+"?", this);
					else
						GlobalStatic.utility.customAlert("¿Seguro que deseas eliminar el producto seleccionado?", this);
				}
			}
			
			public function eliminar():void{
				PopUpManager.removePopUp(GlobalStatic.utility.alert);	
				if(dp.getItemAt(datagrid_productos.selectedIndex).isNew == false)//SI EL ITEM SELECCIONADO NO ES UNO NUEVO, ENTONCES ELIMINAMOS FISICAMENTE EL REGISTRO EN LA BASE DE DATOS
					ejecutarConsultaSQLDelete(datagrid_productos.selectedItem.id_producto);
				else if(dp.getItemAt(datagrid_productos.selectedIndex).isNew == true)//SI ES UN NUEVO ITEM AGREGADO AL dataGridSeccionesSindicales SIGNIFICA QUE ES UN ITEM QUE NO EXISTE EN LA BASE DE DATOS Y QUE POR LO TANTO PUEDE SER REMOVIDO DEL dataprovider.
				{
					datagrid_productos.dataProvider.removeItemAt(datagrid_productos.selectedIndex);
					dp.refresh();
					arrayOriginal = Utileria.clonar(dp);
					datagrid_productos.selectedIndex = 0;
					AlertInfo.show("Se elimino correctamente el producto.");		
				}
			}
			
			internal function ejecutarConsultaSQLDelete(id_producto:int):void
			{
				GlobalStatic.utility.showLoad();
				var queryString:String = "UPDATE " + GlobalStatic.DataBaseName + ".producto SET status = 0 WHERE id_producto = " + id_producto;
				trace(queryString);
			}
			
			internal function onClickVentasGanancias(event:MouseEvent):void
			{
				currentState = "ganancias";
			}
			
			internal function onClickMasVendidos(event:MouseEvent):void
			{
				currentState = "mas_vendidos";
			}
			
			internal function onClickVentasPorEmpleado(event:MouseEvent):void
			{
				currentState = "ventas_empleado";
			}
			
			internal function enterStateEstadisticas(event:FlexEvent):void
			{
				parallel.play();
				parallel2.play();
				parallel3.play();
				parallel4.play();
			}
			
			internal function enterStateMantenimiento(event:FlexEvent):void
			{
				parallel5.play();
				parallel6.play();
				parallel7.play();
				parallel8.play();
				parallel9.play();
			}
			
			public var timer:Timer = new Timer(10000,0);
			public function notificar():void{
				containerNotify.alpha = 1;
				containerNotify.includeInLayout = true;
				containerNotify.visible = true;
				timer.stop();
				timer.start();
				timer.addEventListener(TimerEvent.TIMER, timerComplete);
			}
			
			internal function timerComplete(event:TimerEvent):void{
				timer.stop();
				parallel10.removeEventListener(EffectEvent.EFFECT_END, timerComplete);
				parallel10.play();
				parallel10.addEventListener(EffectEvent.EFFECT_END, endMoveContainerNotify);
			}
			
			internal function endMoveContainerNotify(event:EffectEvent):void{
				containerNotify.removeAllElements();
				containerNotify.visible = false;
				containerNotify.includeInLayout = false;
				parallel10.removeEventListener(EffectEvent.EFFECT_END, endMoveContainerNotify);
			}
			
			public function notificacionAbierta():void{
				containerNotify.alpha = 1;
				timer.stop();
				parallel10.removeEventListener(EffectEvent.EFFECT_END, timerComplete);
			}
			
		]]>
		
	</fx:Script>
	
	<s:Scroller id="scroll" width="100%" height="100%">
		<s:Group id="Contenedor" width="100%" height="100%">
			<s:BorderContainer id="border_header" x="0" y="0" width="100%" height="50"
							   borderVisible="false">
				<s:backgroundFill>
					<s:LinearGradient rotation="90">
						<s:GradientEntry color="#f29c2e"/>
						<s:GradientEntry color="#f9a73c"/>
					</s:LinearGradient>
				</s:backgroundFill> 
				<s:TextInput id="txtBuscar" includeIn="mantenimiento_productos,productos" y="12"
							 left="60" width="400" borderColor="#FFA800" borderVisible="true"
							 change="changeBusqueda()" chromeColor="#FFA800" enter="doSearch();"
							 focusColor="#FF8A00" fontSize="16" fontStyle="normal" maxChars="30"
							 prompt="Buscar"/>
				<s:Image id="btn_buscar" includeIn="mantenimiento_productos,productos" x="440"
						 width="50" height="50" buttonMode="true" click="doSearch();"
						 scaleMode="letterbox" smooth="true" smoothingQuality="high"
						 source="img/btnSearch.png" verticalCenter="-1"/>
				<s:Image id="btnMenu" x="25" width="24" height="24" buttonMode="true"
						 click="onShowDefaultCalloutClick()" smooth="true" smoothingQuality="high"
						 source="img/ModIco.png" verticalCenter="-1"/>
			</s:BorderContainer>
			<renders:renderAdd id="btnNuevo" includeIn="mantenimiento_productos" x="548" y="0"
							   click="btnNuevo_clickHandler(event)"/>
			<renders:renderDelete id="btnEliminar" includeIn="mantenimiento_productos" x="656"
								  y="0" click="btnEliminar_clickHandler()"/>
			<renders:renderSave id="btnGuardar" includeIn="mantenimiento_productos" x="775" y="0"
								click="btnGuardar_clickHandler()"/>
			<renders:renderPrint id="btnImprimir" includeIn="mantenimiento_productos" x="891"
								 y="0"
								 click="AlertInfo.show('Ocurrio un error al guardar la información.')"/>
			<renders:renderHelp id="btnAyuda" includeIn="mantenimiento_productos" x="1002" y="0"
								click="AlertInfo.show('Ocurrio un error al guardar la información.')"/>
			<renders:renderMasVendidos id="btnMasVendidos"
									   includeIn="estadisticas,ganancias,mas_vendidos,ventas_empleado"
									   y="0" click="onClickMasVendidos(event)"
									   x="81" />
			<renders:renderNoVendidos id="btnNoVendidos"
									  includeIn="estadisticas,ganancias,mas_vendidos,ventas_empleado"
									  x="256" y="0"/>
			<renders:renderVentasGanancias id="btnGananciasVentas"
										   includeIn="estadisticas,ganancias,mas_vendidos,ventas_empleado" click="onClickVentasGanancias(event)"
										   x="426" y="0"/>
			<renders:renderVentasPorEmpleado id="btnVentasEmpleado"
											 includeIn="estadisticas,ganancias,mas_vendidos,ventas_empleado" click="onClickVentasPorEmpleado(event)"
											 x="636" y="0"/>
			
			<s:List id="list" includeIn="productos" left="20" right="0" top="51" bottom="0"
					allowMultipleSelection="true" borderVisible="false" contentBackgroundAlpha="0.0"
					dataProvider="{dp}" focusColor="#ffffff" itemRenderer="skins.itemRenderProducto"
					rollOverColor="#D1D1D1" selectionColor="#ADADAD">
				<s:layout>
					<s:TileLayout horizontalGap="12" verticalGap="12"/>
				</s:layout>
			</s:List>
			<s:DataGrid id="datagrid_productos" includeIn="mantenimiento_productos" x="0" y="50"
						width="100%" height="100%" dataProvider="{dp}" editable="true"
						hasFocusableChildren="true" includeInLayout="true">
				<s:columns>
					<s:ArrayList>
						<s:GridColumn id="c" dataField="codigo_barra" headerText="Codigo"
									  itemRenderer="renders.itemRenderCodigoBarras"
									  rendererIsEditable="true"/>
						<s:GridColumn dataField="nom_producto" headerText="Nombre"
									  itemRenderer="renders.itemRenderNombreProducto"
									  rendererIsEditable="true"/>
						<s:GridColumn dataField="marca" headerText="Marca"
									  itemRenderer="renders.itemRenderMarcas"
									  rendererIsEditable="true"/>
						<s:GridColumn dataField="descripcion" headerText="Descripción"
									  itemRenderer="renders.itemRenderDescripcion" rendererIsEditable="true"/>
						<s:GridColumn dataField="cantidad" headerText="Cantidad"
									  itemRenderer="renders.itemRenderCantidad" rendererIsEditable="true"/>
						<s:GridColumn dataField="precio" headerText="Precio"
									  itemRenderer="renders.itemRenderPrecio" rendererIsEditable="true"/>
						<s:GridColumn dataField="precio_compra" headerText="Precio compra"
									  itemRenderer="renders.itemRenderPrecioCompra"
									  rendererIsEditable="true"/>
						<s:GridColumn editable="false" headerText="Foto" itemRenderer="renders.itemRenderImg"
									  rendererIsEditable="true"/>
						<s:GridColumn dataField="fecha_entrada" headerText="Fecha Entrada"
									  itemRenderer="renders.renderFechaEntrada" rendererIsEditable="true"/>
						<s:GridColumn dataField="tipoVenta" headerText="Tipo Venta"
									  itemRenderer="renders.itemRenderTipoVenta"
									  rendererIsEditable="true"/>
						<s:GridColumn dataField="ofertas_Especiales" headerText="Oferta"
									  itemRenderer="renders.itemRenderOfertaEspecial"
									  rendererIsEditable="true"/>
					</s:ArrayList>
				</s:columns>
			</s:DataGrid>    
			
			<graficas:Top20 id="graficaTop20" includeIn="estadisticas,mas_vendidos" top="50" width="100%"
							height="100%"/>	
			<graficas:gananciasVentas id="graficaGananciasVentas" includeIn="ganancias" top="50"
									  width="100%" height="100%"/>	
			<graficas:ventasPorEmpleado id="graficaVentasPorEmpleado" includeIn="ventas_empleado"
										top="50" width="100%" height="100%"/>
			<s:Group id="containerNotify" includeIn="productos" right="50" top="70" width="230"
					 height="80" visible="false" elementAdd="notificar()" rollOver="notificacionAbierta()" rollOut="notificar()">
			</s:Group>
		</s:Group>
	</s:Scroller>	
</s:WindowedApplication>
