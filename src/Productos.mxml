<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:buttons="com.anotherflexdev.ui.buttons.*"
					   xmlns:components="components.*"
					   xmlns:renders="renders.*" currentState="dashboard_productos"
					   preinitialize="preinitializeHandler(event)" skinClass="skins.skinProductos">
	<s:states>
		<s:State name="catalogo_productos"/>
		<s:State name="dashboard_productos"/>
	</s:states>
	
	<fx:Style source="Styles/Main.css"/>
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace buttons "com.anotherflexdev.ui.buttons.*";
		@namespace components "components.*";
		
		/*Setup callout styles*/
		components|SparkCallout {
			backgroundColor:		#FFFFFF;
			borderColor:			#f29c2e;
			borderThickness:		3;
		}
	</fx:Style>
	<fx:Declarations>
		<mx:HTTPService id="service" fault="errorGeneral(event)" result="onJSONLoad(event)"
						resultFormat="text"
						url="http://localhost/Ventas/amfphp/services/getAllProducts.php"
						useProxy="false"/>
		<mx:HTTPService id="service2" fault="errorGeneral(event)" result="onJSONLoad2(event)"
						resultFormat="text"
						url="http://localhost/Ventas/amfphp/services/getAllProducts.php"
						useProxy="false"/>
		
		<mx:RemoteObject id="MiObjetoRemotoProducto" destination="amfphp" showBusyCursor="true"
						 source="producto"> 
			<s:method fault="errorGeneral(event)" name="callStoreProcedure"
					  result="resultCallStoreProcedure(event)"/>
		</mx:RemoteObject>
		
		<s:Callout id="defaultCallout" width="230" height="380"
				   mouseDown="defaultCallout_mouseDownHandler(event)"
				   mouseDownOutside="onMouseDownOutside(event)" verticalPosition="after">
			<s:layout>
				<s:VerticalLayout/>
			</s:layout> 
			<renders:renderCatalogoProductos includeIn="catalogo_productos"
											 click="currentState='dashboard_productos'"/>
			<renders:renderAdministrarProductos includeIn="dashboard_productos"
												click="administrarProductos(event)"/>
			<renders:renderSoporte/>
			<renders:renderConfiguracion/>
			<renders:renderCerrarSession/>
		</s:Callout>
			
		<components:SparkCallout/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[		
			import clases.ConvertFechaToDate;
			import clases.GlobalStatic;
			import clases.Productos;
			import clases.Utileria;
			
			import com.adobe.serialization.json.JSON;
			import com.anotherflexdev.ui.AlertError;
			import com.anotherflexdev.ui.AlertInfo;
			
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.FlexMouseEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			[Bindable] internal var dp:ArrayCollection = new ArrayCollection();
			[Bindable] public var arrayMarcas:ArrayCollection;
			[Bindable] public var arrayOferta:ArrayCollection = new ArrayCollection([{value:"SI"},{value:"NO"}]);
			[Bindable] public var arrayTipoVenta:ArrayCollection = new ArrayCollection([{value:"Pieza(s)"},{value:"A granel Kg/gr"}]);
			internal var arrayOriginal:ArrayCollection;
			
			internal function resultCallStoreProcedure(exito:ResultEvent):void
			{
				removeEventListener(ResultEvent.RESULT, resultCallStoreProcedure);
				switch(exito.result.response)
				{
					case "0":
						service2.send();
						break;
					case "1":
					case "2":
						AlertError.show("Ocurrio un error al guardar la información.", "Error");
						break;
				}
			}
			
			internal function onJSONLoad(event:ResultEvent):void
			{
				removeEventListener(ResultEvent.RESULT, onJSONLoad);
				encapsulado((com.adobe.serialization.json.JSON.decode(String(event.result))));
			}
			
			internal function onJSONLoad2(event:ResultEvent):void
			{
				removeEventListener(ResultEvent.RESULT, onJSONLoad2);
				encapsulado((com.adobe.serialization.json.JSON.decode(String(event.result))));
				AlertInfo.show("La información se ha guardo de forma exitosa", 'Atención');
				PopUpManager.removePopUp(GlobalStatic.utility.progress);
			}
			
			
			internal function preinitializeHandler(event:FlexEvent):void
			{
				removeEventListener(FlexEvent.PREINITIALIZE,preinitializeHandler);
				maximize();
				service.send();
			}
			
			internal function errorGeneral(error:FaultEvent):void
			{
				removeEventListener(FaultEvent.FAULT, errorGeneral);
				Alert.show(error.fault.faultString, "Ocurrio un error");
			}
			
			internal function encapsulado(collection:*):void{
				dp.removeAll();
				for each(var item:Object in collection){
					dp.addItem(new clases.Productos(item));
				}
				arrayOriginal = Utileria.clonar(dp);
			}
			
			[Bindable] protected var convertir:ConvertFechaToDate = new ConvertFechaToDate();
			
			internal function btnGuardar_clickHandler():void
			{
				GlobalStatic.utility.avance();
				var foundObject:Array = new Array(), index:uint = 0;
				var lista:IList = new ArrayList();
				var queryString:String;
				var newDate:String, oldDate:String, isCompleted:Boolean = false, operacion:uint = 0;
				for each(var item:Object in datagrid_productos.dataProvider)
				{
						if(item.isNew == true){
							
							if(item.nom_producto != "")
							{
								if(item.codigo_barra != "")
								{
									if(item.descripcion != "")
									{
										if(item.cantidad != Utileria.defaultValue)
										{
											if(item.precio != Utileria.defaultValue)
											{
												if(item.precio_compra != Utileria.defaultValue)
												{
													if(item.marca != "")
													{
														if(item.tipoVenta != "")
														{
															if(item.ofertas_Especiales != "")
															{
																if(item.fecha_entrada != null)
																{
																	isCompleted = true;
																}
															}
														}
													}
												}	
											}
										}
									}
								}
							}
							
							if(isCompleted == true)
							{
								lista.addItem(" nom_producto = '" + item.nom_producto + "'");
								lista.addItem(" codigo_barra = '" + item.codigo_barra + "'");
								lista.addItem(" descripcion = '" + item.descripcion + "'");
								lista.addItem(" precio = " + item.precio);
								lista.addItem(" precio_compra = " + item.precio_compra);
								lista.addItem(" tipoVenta = '" + item.tipoVenta + "'");
								lista.addItem(" ofertas_Especiales = '" + item.ofertas_Especiales + "'");
								
								if(item.path != null)
									lista.addItem(" path = '" + item.path + "'");
								
								newDate = convertir.formatoFechaYYYYMMDD(item.fecha_entrada);
								lista.addItem(" fecha_entrada = Date('" + newDate + "')");
								
								GlobalStatic.utility.obtenerCamposValores(lista);
								GlobalStatic.utility.queryMasivo("INSERT INTO " + GlobalStatic.DataBaseName + ".producto (" + GlobalStatic.utility.campos + ") VALUES (" + GlobalStatic.utility.valores + ")");
								lista.removeAll();
								
								isCompleted = false;
							}else
							{
								item.error = true;
								excepcion();
								return;	
							}
							
						}else{
							foundObject = GlobalStatic.utility.findMatchesByIDReturnArray(item.id_producto, arrayOriginal,"id_producto");
							for each(var originalItem:Object in foundObject)
							{

								originalItem.nom_producto != item.nom_producto ? lista.addItem(" nom_producto = '" + item.nom_producto + "'") : "";
								originalItem.codigo_barra != item.codigo_barra ? lista.addItem(" codigo_barra = '" + item.codigo_barra + "'") : "";
								originalItem.descripcion != item.descripcion ? lista.addItem(" descripcion = '" + item.descripcion + "'") : "";
								originalItem.cantidad != item.cantidad ? lista.addItem(" cantidad = " + item.cantidad) : "";
								originalItem.precio != item.precio ? lista.addItem(" precio = " + item.precio) : "";
								originalItem.precio_compra != item.precio_compra ? lista.addItem(" precio_compra = " + item.precio_compra) : "";
								originalItem.marca != item.marca ? lista.addItem(" marca = '" + item.marca + "'") : "";
								originalItem.tipoVenta != item.tipoVenta ? lista.addItem(" tipoVenta = '" + item.tipoVenta + "'") : "";
								originalItem.ofertas_Especiales != item.ofertas_Especiales ? lista.addItem(" ofertas_Especiales = '" + item.ofertas_Especiales + "'") : "";
								originalItem.path != item.path ? lista.addItem(" path = '" + item.path + "'") : "";
								
								newDate = convertir.formatoFechaYYYYMMDD(item.fecha_entrada);
								oldDate = convertir.formatoFechaYYYYMMDD(originalItem.fecha_entrada);
								oldDate != newDate ? lista.addItem(" fecha_entrada = Date('" + newDate + "')") : "";
								
								if(lista.length > 0)
								{
									queryString = "UPDATE " + GlobalStatic.DataBaseName + ".producto SET";
									index = lista.length - 1;
									for each(var obj:Object in lista.toArray())
									index-- == 0 ? queryString += obj : queryString += obj + " ,";
									
									queryString += " WHERE id_producto = " + item.id_producto;
									GlobalStatic.utility.queryMasivo(queryString);
									lista.removeAll();
								}
								break;
							}
						}
				}
				if(GlobalStatic.utility.listaQuerys.length > 0)
					contruirQuery();
				else{
					PopUpManager.removePopUp(GlobalStatic.utility.progress);
					AlertInfo.show("Usted no ha realizado ningun cambio en la información de productos.");
				}	
			}
			
			internal function excepcion():void{
				PopUpManager.removePopUp(GlobalStatic.utility.progress);	
				dp.refresh();
				datagrid_productos.grid.setFocus();
				AlertError.show("La información proporcionada no esta completa o contiene un error, por favor verifique la información e intente guardar nuevamente.");
			}
			
			internal function contruirQuery():void
			{
				var superQuery:String = "";
				var index:uint = GlobalStatic.utility.listaQuerys.length - 1;
				for each(var query:Object in GlobalStatic.utility.listaQuerys.toArray())
				index-- == 0 ? superQuery += query : superQuery += query + "|()|";
				GlobalStatic.utility.listaQuerys.removeAll();//AHORA REMOVEMOS TODO LO QUE HAY EN LA LISTA PARA OCUPARLA LA PROXIMA VEZ.
				trace("call " + GlobalStatic.DataBaseName + ".Procedure_SqlTable(\"" + superQuery +"\")");
				//MiObjetoRemotoProducto.callStoreProcedure.send(superQuery);
			}
			
			internal var palabra:String;
			
			internal function doSearch():void {
				palabra = txtBuscar.text.toLowerCase();
				dp.filterFunction = filterMyArrayCollection;
				dp.refresh();
			}
			
			internal function filterMyArrayCollection(item:Object):Boolean 
			{				
				return ((item.nom_producto.toLowerCase().indexOf(palabra) != -1) || (item.marca.toLowerCase().indexOf(palabra) != -1) || (item.descripcion.toLowerCase().indexOf(palabra) != -1))
			}
			
			internal function changeBusqueda():void{
				if(txtBuscar.text.length == 0){
					palabra = '';
					dp.filterFunction = filterMyArrayCollection;
					dp.refresh();
				}
			}
			
			internal function onShowDefaultCalloutClick():void {
				defaultCallout.open(btnMenu);
			}
			
			internal function onMouseDownOutside(event:FlexMouseEvent):void {
				event.target.close();
			}
						
			internal function defaultCallout_mouseDownHandler(event:MouseEvent):void
			{
				defaultCallout.close();
			}
			
			internal function administrarProductos(event:MouseEvent):void
			{
				currentState='catalogo_productos';
				
				if(arrayMarcas == null)	
					arrayMarcas = new ArrayCollection(Utileria.group(dp));
			}
			
			internal function btnNuevo_clickHandler(event:MouseEvent):void
			{
				var newItem:clases.Productos = new clases.Productos();
				newItem.isNew = true;
				dp.sort = null;
				dp.filterFunction = null;
				datagrid_productos.sortableColumns = false;
				dp.addItemAt(newItem,0);
				datagrid_productos.setSelectedIndex(0);
				datagrid_productos.startItemEditorSession(0,0);
				datagrid_productos.scroller.viewport.verticalScrollPosition = -1;
			}
			
			internal function btnEliminar_clickHandler():void
			{
				GlobalStatic.utility.alert('¿ Deseas eliminar el Producto seleccionado ?');
			}
			
			public function accion(opcion:uint):void{
				if(opcion == 0)
					trace("cero");
				else
					trace("uno");
				return;
				if(datagrid_productos.selectedItem != null)
				{
					if(datagrid_productos.selectedItem.nom_producto != null && datagrid_productos.selectedItem.descripcion)
						AlertError.show('¿ Deseas eliminar el Producto ' + datagrid_productos.selectedItem.nom_producto+ ' - ' + datagrid_productos.selectedItem.descripcion ,'Atención', Alert.YES | Alert.NO, this, eliminarCargo, null);
					else
						AlertError.show('¿ Deseas eliminar el Producto seleccionado ?', 'Atención', Alert.YES | Alert.NO, this, eliminarCargo, null);
				}
				else
					AlertInfo.show("Usted no ha seleccionado ningun Cargo para eliminarlo.", "Atención", 0, this, null, null);	
			}
			protected function eliminarCargo(event:CloseEvent):void
			{
				if(event.detail == Alert.YES)
				{
					if(dp.getItemAt(datagrid_productos.selectedIndex).isNew == false)//SI EL ITEM SELECCIONADO NO ES UNO NUEVO, ENTONCES ELIMINAMOS FISICAMENTE EL REGISTRO EN LA BASE DE DATOS
						ejecutarConsultaSQLDelete(datagrid_productos.selectedItem.id_producto);
					else if(dp.getItemAt(datagrid_productos.selectedIndex).isNew == true)//SI ES UN NUEVO ITEM AGREGADO AL dataGridSeccionesSindicales SIGNIFICA QUE ES UN ITEM QUE NO EXISTE EN LA BASE DE DATOS Y QUE POR LO TANTO PUEDE SER REMOVIDO DEL dataprovider.
					{
						datagrid_productos.dataProvider.removeItemAt(datagrid_productos.selectedIndex);
						dp.refresh();
						arrayOriginal = Utileria.clonar(dp);
						btnEliminar.enabled = false;
						datagrid_productos.selectedIndex = 0;
						Alert.show("Se elimino correctamente el Cargo en el Sindicato.", "Éxito", 0, this, null, null);		
					}
				}
			}
			
			internal function ejecutarConsultaSQLDelete(id_producto:int):void
			{
				GlobalStatic.utility.showLoading("Espere mietras se elimina el Cargo en el Sindicato seleccionado.");
				var queryString:String = "UPDATE " + GlobalStatic.DataBaseName + ".producto SET status = 0 WHERE id_producto = " + id_producto;
				trace(queryString);
			}
		]]>
		
	</fx:Script>
	
	<s:Scroller id="scroll" includeIn="catalogo_productos,dashboard_productos" width="100%"
				height="100%">
		<s:Group id="Contenedor" width="100%" height="100%">
			<s:BorderContainer id="border_header" x="0" y="0" width="100%" height="50"
							   borderVisible="false">
				<s:backgroundFill>
					<s:LinearGradient rotation="90">
						<s:GradientEntry color="#f29c2e"/>
						<s:GradientEntry color="#f9a73c"/>
					</s:LinearGradient>
				</s:backgroundFill> 
				<s:TextInput id="txtBuscar" includeIn="dashboard_productos,catalogo_productos" y="12"
							 left="60" width="400" borderColor="#FFA800" borderVisible="true"
							 change="changeBusqueda()" chromeColor="#FFA800" enter="doSearch();"
							 focusColor="#FF8A00" fontSize="16" fontStyle="normal" maxChars="30"
							 prompt="Buscar"/>
				<s:Image id="btn_buscar" includeIn="dashboard_productos,catalogo_productos" x="440"
						 width="50" height="50" buttonMode="true" click="doSearch();"
						 scaleMode="letterbox" smooth="true" smoothingQuality="high"
						 source="img/btnSearch.png" verticalCenter="-1"/>
				<s:Image id="btnMenu" includeIn="dashboard_productos,catalogo_productos" x="25"
						 width="24" height="24" buttonMode="true"
						 click="onShowDefaultCalloutClick()" smooth="true" smoothingQuality="high"
						 source="img/ModIco.png" verticalCenter="-1"/>
				<s:HGroup x="550" y="5" height="40">
					<renders:renderAdd id="btnNuevo" includeIn="catalogo_productos"
									   click="btnNuevo_clickHandler(event)"/>
					<renders:renderDelete id="btnEliminar" includeIn="catalogo_productos" click="btnEliminar_clickHandler()"/>
					<renders:renderSave id="btnGuardar" includeIn="catalogo_productos"
										click="btnGuardar_clickHandler()"/>
					<renders:renderPrint id="btnImprimir" includeIn="catalogo_productos"
										 click="AlertInfo.show('Ocurrio un error al guardar la información.')"/>
					<renders:renderHelp id="btnAyuda" includeIn="catalogo_productos"
										click="AlertInfo.show('Ocurrio un error al guardar la información.')"/>
				</s:HGroup>
			</s:BorderContainer>
			
			<s:List id="list" includeIn="dashboard_productos" left="20" right="0" top="51" bottom="0"
					borderVisible="false" contentBackgroundAlpha="0.0" dataProvider="{dp}"
					focusColor="#ffffff" itemRenderer="skins.itemRenderProducto" allowMultipleSelection="true"
					rollOverColor="#D1D1D1" selectionColor="#ADADAD" >
				<s:layout>
					<s:TileLayout horizontalGap="10" verticalGap="10"/>
				</s:layout>
			</s:List>
			<s:DataGrid id="datagrid_productos" includeInLayout="true" includeIn="catalogo_productos" x="0" y="50"
						width="100%" height="100%" dataProvider="{dp}" editable="true"
						hasFocusableChildren="true">
				<s:columns>
					<s:ArrayList>
						<s:GridColumn id="c" dataField="codigo_barra" headerText="Codigo" itemRenderer="itemRenderCodigoBarras" rendererIsEditable="true"/>
						<s:GridColumn dataField="nom_producto" headerText="Nombre" itemRenderer="itemRenderNombreProducto" rendererIsEditable="true"/>
						<s:GridColumn dataField="marca" headerText="Marca"
									  itemRenderer="renders.itemRenderMarcas" rendererIsEditable="true"/>
						<s:GridColumn dataField="descripcion" headerText="Descripción" itemRenderer="itemRenderDescripcion" rendererIsEditable="true"/>
						<s:GridColumn dataField="cantidad" headerText="Cantidad" itemRenderer="itemRenderCantidad" rendererIsEditable="true"/>
						<s:GridColumn dataField="precio" headerText="Precio" itemRenderer="itemRenderPrecio" rendererIsEditable="true"/>
						<s:GridColumn dataField="precio_compra" headerText="Precio compra" itemRenderer="itemRenderPrecioCompra" rendererIsEditable="true"/>
						<s:GridColumn editable="false" headerText="Foto" itemRenderer="itemRenderImg" rendererIsEditable="true"/>
						<s:GridColumn dataField="fecha_entrada" rendererIsEditable="true"
									  headerText="Fecha Entrada" itemRenderer="renderFechaEntrada"/>
						<s:GridColumn dataField="tipoVenta" headerText="Tipo Venta" rendererIsEditable="true"
									  itemRenderer="renders.itemRenderTipoVenta"/>
						<s:GridColumn dataField="ofertas_Especiales" rendererIsEditable="true"
									  headerText="Oferta"
									  itemRenderer="renders.itemRenderOfertaEspecial"/>
						
						
					</s:ArrayList>
				</s:columns>
			</s:DataGrid> 
		</s:Group>
	</s:Scroller>	
</s:WindowedApplication>
